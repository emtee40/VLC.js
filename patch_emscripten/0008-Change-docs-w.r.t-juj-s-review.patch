From 45b70ef08c5a7ea75cc0c7e1869aa6aae3b09c15 Mon Sep 17 00:00:00 2001
From: yoanlcq <yoanlecoq.io@gmail.com>
Date: Mon, 10 Jul 2017 19:45:26 +0200
Subject: [PATCH 08/23] Change docs w.r.t juj's review

---
 site/source/docs/porting/Audio.rst | 46 ++++++++++++--------------------------
 1 file changed, 14 insertions(+), 32 deletions(-)

diff --git a/site/source/docs/porting/Audio.rst b/site/source/docs/porting/Audio.rst
index 43b55b8d7..241559efb 100644
--- a/site/source/docs/porting/Audio.rst
+++ b/site/source/docs/porting/Audio.rst
@@ -4,10 +4,13 @@
 Audio
 =====
 
-Emscripten supports OpenAL 1.1 "out of the box", with no additional compilation flag required. The implementation uses the Web Audio API.
+Emscripten ships with its own implementation of the OpenAL 1.1 API, using the Web Audio API as a backend.
 
-You can reasonably expect ported OpenAL applications to "just work" with no additional effort.  
-However, there are some implementation-specific aspects which are worth considering - these are documented here.
+You can reasonably expect ported OpenAL applications to "just work" with no additional effort. Just link with the ``-lopenal`` linker flag.
+
+There are some implementation-specific aspects which are worth considering and are documented here.
+
+.. warning:: There used to be no additional flag to pass to the compiler in order to use OpenAL. However, specifying ``-lopenal`` as mentioned above should be considered mandatory (at some point in the future, it **will** be)!
 
 
 .. _Audio-openal-extensions-g:
@@ -33,32 +36,21 @@ The following extensions are supported by Emscripten's OpenAL implementation.
 Guidelines for Audio on Emscripten
 ==================================
 
-First: Do not loop on OpenAL calls.
+Know that your application needs to yield to the Javascript main loop for audio processing to take place (See :ref:`Browser main loop <emscripten-runtime-environment-main-loop>`).
 
-Put simply, avoid completely this kind of code :
+Put simply, this kind of code will block indefinitely :
 
 .. code-block:: c
 
     while(nframes < THE_NUMBER_OF_FRAMES_WE_WANT)
         alcGetIntegerv(device, ALC_CAPTURE_SAMPLES, 1, &nframes);
 
+The above snippet usually works in native applications because most OpenAL implementations own and manage one or more separate threads. This is **not** the case in Emscripten.
 
-The reason for this is simple: Your application needs to yield to the Javascript main loop for audio processing to take place (See :ref:`Browser main loop <emscripten-runtime-environment-main-loop>`).
-
-The above snippet usually works because most OpenAL implementations own and manage one or more separate threads. This is not the case in Emscripten.
 
 What you must do instead is perform each such query only once per "main loop iteration" (i.e the callback you provide via :c:func:`emscripten_set_main_loop` or :c:func:`emscripten_set_main_loop_arg`).
 
 
-Second: Avoid creating and destroying resources relentlessly.
-
-On some browsers (except, apparently, Firefox), garbage collection does not occur as much as it should. Knowing this, your app should ideally at most use one ``ALCcontext`` for playback and one ``ALCdevice`` for capture.
-
-Even if you're planning to suspend audio capture or playback for extended periods of time, it is probably better to keep contexts in memory (unlike in native apps where you should rather destroy them) to avoid risking memory leaks caused by poorly garbage-collected Javascript implementations.
-
-Of course, the current OpenAL implementation strives to be memory-efficient, but it has no control over lower-level mechanisms involved.
-
-
 .. _Audio-openal-capture-behavior-g:
 
 Emscripten-specific capture behavior
@@ -66,11 +58,8 @@ Emscripten-specific capture behavior
 
 Attempting to open an input stream to the user's audio capture device
 results in the asynchronous appearance of a small browser-specific dialog
-asking for the user's permission.
+asking for the user's permission, and on some browsers, the capture device to choose.
 
-.. note:: 
-    On Firefox, the user is also given the opportunity to pick from a list of devices at that moment.
-    On other browsers, this is normally a simple "Allow/Deny" button pair on a toast.
 
 With this in mind, when ``alcCaptureOpenDevice()`` is called with valid and 
 supported parameters, a "proxy" device is returned, which successfully 
@@ -81,7 +70,7 @@ That means, when calling ``alcGetIntegerv(device, ALC_CAPTURE_SAMPLES, 1, &nfram
 If the user clicks "Deny", the device is invalidated (because this is somewhat
 similar to unplugging the physical device) and calls to ``alcCapture*`` functions on that
 device then consistently fail with ``ALC_INVALID_DEVICE``.
-Your application must be prepared to handle this properly.
+Your application should be prepared to handle this properly.
 
 .. note::
     Some browsers "remember" this choice and apply it automatically every time it would be asked again instead.
@@ -94,16 +83,9 @@ Useful implementation details of OpenAL capture
 ===============================================
 
 Internally, Web Audio's capture data is always backed by a Javascript ``Float32Array``.  
-Thus, ``AL_FORMAT_MONO_FLOAT32`` and ``AL_FORMAT_STEREO_FLOAT32`` are the only formats which do not require running "type conversion passes" on acquired buffers.
-
-Note, however, that :
-
-- It's probably pointless to pick a stereo format for capture;
-- float32 samples use more memory than the standard 16-bit or 8-bit integer formats;
-- Most microphones aren't very high quality.
-  Especially for real-time apps such as games, users will likely tolerate lower quality recordings.
+Thus, ``AL_FORMAT_MONO_FLOAT32`` and ``AL_FORMAT_STEREO_FLOAT32`` are the only formats which do not require converting acquired samples from their initial type to another.
 
-Also, the actual sample rate at which samples are acquired from the device is unpredictable and depends on many factors, including the user's browser and setup. If this sample rate does not match the one your app requests, the implementation is required to perform resampling on your behalf.  
+Also, the actual sample rate at which samples are acquired from the device is currently dictated by the browser and hardware, instead of user code. If this sample rate does not match the one your app requests, the implementation is required to perform resampling on your behalf.  
 
 That sample rate is given by ``audioCtx.sampleRate``, where ``audioCtx`` is the ``AudioContext`` object used internally by the relevant capture ``ALCdevice``.
 Currently, Emscripten provides no direct way for applications to access this value, but this might be provided through an Emscripten-specific OpenAL extension (which is not here yet because it requires registration).
@@ -138,6 +120,6 @@ Improving and extending the implementation
 
 Currently, the OpenAL capture implementation performs na√Øve linear resampling because it is simple and the small loss of quality was deemed acceptable.
 
-However, you're welcome to improve this by contributing if you so wish!
+However, you're welcome to improve this by contributing if you so wish! See `this issue <https://github.com/kripken/emscripten/issues/5349>`_ , for instance.
 
 Likewise, if you'd like to see a particlar extension implemented (whether it is registered or not), then your best bet is to either file an issue (provided no related prior issue existed for this), or contribute! See :ref:`Contributing <contributing>` for guidelines.
-- 
2.14.1

