From e5e73b656f5843f199bbf9725637d3c4d475420b Mon Sep 17 00:00:00 2001
From: yoanlcq <yoanlecoq.io@gmail.com>
Date: Mon, 10 Jul 2017 20:32:31 +0200
Subject: [PATCH 09/23] First style fix pass

---
 src/library_openal.js | 72 +++++++++++++++++++++++++--------------------------
 1 file changed, 36 insertions(+), 36 deletions(-)

diff --git a/src/library_openal.js b/src/library_openal.js
index 7f65f6d67..9cbab90b3 100644
--- a/src/library_openal.js
+++ b/src/library_openal.js
@@ -410,7 +410,7 @@ var LibraryOpenAL = {
     },
 
     updateContextGlobal: function(ctx) {
-      for (i in ctx.sources) {
+      for (var i in ctx.sources) {
         AL.updateSourceGlobal(ctx.sources[i]);
       }
     },
@@ -638,7 +638,7 @@ var LibraryOpenAL = {
 
     sourceDuration: function(src) {
       var length = 0.0;
-      for (i = 0; i < src.bufQueue.length; i++) {
+      for (var i = 0; i < src.bufQueue.length; i++) {
         var audioBuf = src.bufQueue[i].audioBuf;
         length += audioBuf ? audioBuf.duration : 0.0;
       }
@@ -649,7 +649,7 @@ var LibraryOpenAL = {
       AL.updateSourceTime(src);
 
       var offset = 0.0;
-      for (i = 0; i < src.bufsProcessed; i++) {
+      for (var i = 0; i < src.bufsProcessed; i++) {
         offset += src.bufQueue[i].audioBuf.duration;
       }
       offset += src.bufOffset;
@@ -1063,7 +1063,7 @@ var LibraryOpenAL = {
       case 0x2009 /* AL_BYTE_LENGTH_SOFT */: 
         var length = 0;
         var bytesPerFrame = 0;
-        for (i = 0; i < src.bufQueue.length; i++) {
+        for (var i = 0; i < src.bufQueue.length; i++) {
           length += src.bufQueue[i].length;
           if (src.bufQueue[i].id !== 0) {
             bytesPerFrame = src.bufQueue[i].bytes * src.bufQueue[i].channels;
@@ -1072,7 +1072,7 @@ var LibraryOpenAL = {
         return length * bytesPerFrame;
       case 0x200A /* AL_SAMPLE_LENGTH_SOFT */:
         var length = 0;
-        for (i = 0; i < src.bufQueue.length; i++) {
+        for (var i = 0; i < src.bufQueue.length; i++) {
           length += src.bufQueue[i].length;
         }
         return length;
@@ -1496,7 +1496,7 @@ var LibraryOpenAL = {
         return null;
       }
       var c = AL.captures[deviceId];
-      if(!c) {
+      if (!c) {
 #if OPENAL_DEBUG
         console.error(funcname+"() on an invalid device");
 #endif
@@ -1504,7 +1504,7 @@ var LibraryOpenAL = {
         return null;
       }
       var err = c.mediaStreamError;
-      if(err) {
+      if (err) {
 #if OPENAL_DEBUG
         switch(err.name) {
         case "PermissionDeniedError":
@@ -1541,9 +1541,9 @@ var LibraryOpenAL = {
     var resolvedDeviceName = AL.CAPTURE_DEVICE_NAME;
 
     // NULL is a valid device name here (resolves to default);
-    if(pDeviceName !== 0) {
+    if (pDeviceName !== 0) {
       resolvedDeviceName = Pointer_stringify(pDeviceName);
-      if(resolvedDeviceName !== AL.CAPTURE_DEVICE_NAME) {
+      if (resolvedDeviceName !== AL.CAPTURE_DEVICE_NAME) {
 #if OPENAL_DEBUG
         console.error("alcCaptureOpenDevice() with invalid device name \""+resolvedDeviceName+"\"");
 #endif
@@ -1585,7 +1585,7 @@ var LibraryOpenAL = {
 
     var AudioContext = window.AudioContext || window.webkitAudioContext;
 
-    if(!AL.sharedCaptureAudioCtx) {
+    if (!AL.sharedCaptureAudioCtx) {
       try {
         AL.sharedCaptureAudioCtx = new AudioContext();
       } catch(e) {
@@ -1659,7 +1659,7 @@ var LibraryOpenAL = {
 
     var buffers = [];
     try {
-      for(var chan=0 ; chan < outputChannelCount ; ++chan)
+      for (var chan=0 ; chan < outputChannelCount ; ++chan)
         buffers[chan] = newSampleArray(bufferFrameCapacity);
     } catch(e) {
 #if OPENAL_DEBUG
@@ -1722,7 +1722,7 @@ var LibraryOpenAL = {
       newCapture.inputChannelCount = inputChannelCount;
 
 #if OPENAL_DEBUG
-      if(inputChannelCount > 2 || outputChannelCount > 2)
+      if (inputChannelCount > 2 || outputChannelCount > 2)
         console.warn("The number of input or output channels is too high, capture might not work as expected!");
 #endif
 
@@ -1735,11 +1735,11 @@ var LibraryOpenAL = {
         processorFrameCount, inputChannelCount, outputChannelCount
       );
 
-      if(inputChannelCount > outputChannelCount) {
+      if (inputChannelCount > outputChannelCount) {
         newCapture.mergerNode = newCapture.audioCtx.createChannelMerger(inputChannelCount);
         newCapture.mediaStreamSourceNode.connect(newCapture.mergerNode);
         newCapture.mergerNode.connect(newCapture.scriptProcessorNode);
-      } else if(inputChannelCount < outputChannelCount) {
+      } else if (inputChannelCount < outputChannelCount) {
         newCapture.splitterNode = newCapture.audioCtx.createChannelSplitter(outputChannelCount);
         newCapture.mediaStreamSourceNode.connect(newCapture.splitterNode);
         newCapture.splitterNode.connect(newCapture.scriptProcessorNode);
@@ -1751,14 +1751,14 @@ var LibraryOpenAL = {
 
       newCapture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {
 
-        if(!newCapture.isCapturing)
+        if (!newCapture.isCapturing)
           return;
 
         var srcBuf = audioProcessingEvent.inputBuffer;
         var c = newCapture;
-        for(var chan=0 ; chan < srcBuf.numberOfChannels ; ++chan) {
+        for (var chan=0 ; chan < srcBuf.numberOfChannels ; ++chan) {
           var srcArray = srcBuf.getChannelData(chan);
-          for(var i=0 ; i<srcArray.length ; ++i) {
+          for (var i=0 ; i<srcArray.length ; ++i) {
             var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
             c.buffers[chan][wi] = c.f32ToSampleFormat(srcArray[i]);
           }
@@ -1771,7 +1771,7 @@ var LibraryOpenAL = {
     };
 
     // The latest way to call getUserMedia()
-    if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
+    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
       navigator.mediaDevices
            .getUserMedia({audio: true})
            .then(onSuccess)
@@ -1787,7 +1787,7 @@ var LibraryOpenAL = {
 
   alcCaptureCloseDevice: function(deviceId) {
     var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureCloseDevice");
-    if(!c)
+    if (!c)
       return false;
 
     delete AL.captures[deviceId];
@@ -1796,14 +1796,14 @@ var LibraryOpenAL = {
     // This clean-up might be unnecessary (paranoid) ?
 
     // May happen if user hasn't decided to grant or deny input
-    if(c.mediaStreamSourceNode)
+    if (c.mediaStreamSourceNode)
       c.mediaStreamSourceNode.disconnect();
-    if(c.mergerNode)
+    if (c.mergerNode)
       c.mergerNode.disconnect();
-    if(c.splitterNode)
+    if (c.splitterNode)
       c.splitterNode.disconnect();
     // May happen if user hasn't decided to grant or deny input
-    if(c.scriptProcessorNode)
+    if (c.scriptProcessorNode)
       c.scriptProcessorNode.disconnect();
 
     delete c.buffers;
@@ -1816,10 +1816,10 @@ var LibraryOpenAL = {
 
   alcCaptureStart: function(deviceId) {
     var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureStart");
-    if(!c)
+    if (!c)
       return;
 
-    if(c.isCapturing) {
+    if (c.isCapturing) {
 #if OPENAL_DEBUG
       console.warn("Redundant call to alcCaptureStart()");
 #endif
@@ -1836,11 +1836,11 @@ var LibraryOpenAL = {
 
   alcCaptureStop: function(deviceId) {
     var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureStop");
-    if(!c)
+    if (!c)
       return;
 
 #if OPENAL_DEBUG
-    if(!c.isCapturing)
+    if (!c.isCapturing)
       console.warn("Redundant call to alcCaptureStop()");
 #endif
     c.isCapturing = false;
@@ -1853,7 +1853,7 @@ var LibraryOpenAL = {
   // renamed accordingly here
   alcCaptureSamples: function(deviceId, pFrames, requestedFrameCount) {
     var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureSamples");
-    if(!c)
+    if (!c)
       return;
 
     // ALCsizei is actually 32-bit signed int, so could be negative
@@ -1896,9 +1896,9 @@ var LibraryOpenAL = {
     var dstfreq = c.requestedSampleRate;
     var srcfreq = c.audioCtx.sampleRate;
 
-    if(srcfreq == dstfreq) {
-      for(var i=0, frame_i=0 ; frame_i < requestedFrameCount ; ++frame_i) {
-        for(var chan=0 ; chan < c.buffers.length ; ++chan, ++i) {
+    if (srcfreq == dstfreq) {
+      for (var i=0, frame_i=0 ; frame_i < requestedFrameCount ; ++frame_i) {
+        for (var chan=0 ; chan < c.buffers.length ; ++chan, ++i) {
           var src_i = (frame_i + c.capturePlayhead) % c.capturedFrameCount;
           setSample(i, c.buffers[chan][src_i]);
         }
@@ -1915,14 +1915,14 @@ var LibraryOpenAL = {
         return (1 - progress) * from + progress * to;
       }
 
-      for(var i=0, frame_i=0 ; frame_i < requestedFrameCount ; ++frame_i) {
+      for (var i=0, frame_i=0 ; frame_i < requestedFrameCount ; ++frame_i) {
 
         var t = frame_i / dstfreq; // Most exact time for the current output sample
         var src_i = (Math.floor(t*srcfreq) + c.capturePlayhead) % c.capturedFrameCount;
         var src_next_i = (src_i+1) % c.capturedFrameCount;
         var between = t*srcfreq - src_i; //(t - src_i/srcfreq) / ((src_i+1)/srcfreq - src_i/srcfreq);
 
-        for(var chan=0 ; chan < c.buffers.length ; ++chan, ++i) {
+        for (var chan=0 ; chan < c.buffers.length ; ++chan, ++i) {
           var cb = c.buffers[chan];
           var sample = lerp(cb[src_i], cb[src_next_i], between);
           setSample(i, sample);
@@ -2303,11 +2303,11 @@ var LibraryOpenAL = {
       ret = AL.CAPTURE_DEVICE_NAME;
       break;
     case 0x310 /* ALC_CAPTURE_DEVICE_SPECIFIER */:
-      if(deviceId === 0) 
+      if (deviceId === 0) 
         ret = AL.CAPTURE_DEVICE_NAME.concat('\0');
         else {
         var c = AL.requireValidCaptureDevice(deviceId, "alcGetString");
-        if(!c)
+        if (!c)
           return 0;
         ret = c.deviceName;
       }  
@@ -2431,7 +2431,7 @@ var LibraryOpenAL = {
       {{{ makeSetValue("pValues", "0", "1", "i32") }}};
     case 0x312 /* ALC_CAPTURE_SAMPLES */:
       var c = AL.requireValidCaptureDevice(deviceId, "alcGetIntegerv");
-      if(!c)
+      if (!c)
         return;
       var n = c.capturedFrameCount;
       var dstfreq = c.requestedSampleRate;
-- 
2.14.1

