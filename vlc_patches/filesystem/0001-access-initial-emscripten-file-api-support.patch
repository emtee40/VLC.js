From ffa3b9e16691a72b744715564f63b34ea57ab414 Mon Sep 17 00:00:00 2001
From: Mehdi Sabwat <mehdi@videolabs.io>
Date: Wed, 18 Nov 2020 17:50:39 +0100
Subject: [PATCH 1/1] access: initial emscripten file api support

---
 modules/access/Makefile.am    |   8 ++
 modules/access/emscripten.cpp | 169 ++++++++++++++++++++++++++++++++++
 2 files changed, 177 insertions(+)
 create mode 100644 modules/access/emscripten.cpp

diff --git a/modules/access/Makefile.am b/modules/access/Makefile.am
index 9cd3098fc2..331de24f82 100644
--- a/modules/access/Makefile.am
+++ b/modules/access/Makefile.am
@@ -454,3 +454,11 @@ librist_plugin_la_LIBADD = $(SOCKET_LIBS)
 if HAVE_BITSTREAM
 access_LTLIBRARIES += librist_plugin.la
 endif
+
+### EMSCRIPTEN ###
+
+libemscriptenfs_plugin_la_SOURCES = access/emscripten.cpp
+libemscriptenfs_plugin_la_CPPFLAGS = $(AM_CPPFLAGS)
+if HAVE_EMSCRIPTEN
+access_LTLIBRARIES += libemscriptenfs_plugin.la
+endif
diff --git a/modules/access/emscripten.cpp b/modules/access/emscripten.cpp
new file mode 100644
index 0000000000..f3162574f9
--- /dev/null
+++ b/modules/access/emscripten.cpp
@@ -0,0 +1,169 @@
+/*****************************************************************************
+ * emscripten.cpp: emscripten file system access plugin
+ *****************************************************************************
+ * Copyright (C) 2001-2020 VLC authors and VideoLAN
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_plugin.h>
+#include<vlc_stream.h>
+#include <emscripten.h>
+
+static ssize_t Read (stream_t *, void *, size_t);
+static int FileSeek (stream_t *, uint64_t);
+static int FileControl (stream_t *, int, va_list);
+
+typedef struct
+{
+    int fd;
+    int offset;
+
+    bool b_pace_control;
+} access_sys_t;
+
+/*****************************************************************************
+ * FileOpen: open the file
+ *****************************************************************************/
+int FileOpen( vlc_object_t *p_this )
+{
+    stream_t     *p_access = reinterpret_cast<stream_t *>(p_this);
+
+    /* Open file */
+    int fd = 42; // not implemented for now
+    access_sys_t *p_sys = reinterpret_cast<access_sys_t *>(vlc_obj_malloc(p_this, sizeof (*p_sys)));
+    if (unlikely(p_sys == NULL))
+        goto error;
+    p_access->pf_read = Read;
+    p_access->pf_block = NULL;
+    p_access->pf_control = FileControl;
+    p_access->p_sys = p_sys;
+    p_sys->fd = fd;
+    p_sys->offset = 0;
+    p_access->pf_seek = FileSeek;
+    p_sys->b_pace_control = strcasecmp (p_access->psz_name, "stream");
+
+    return VLC_SUCCESS;
+error:
+    p_sys->offset=0;
+    return VLC_EGENERIC;
+}
+
+/*****************************************************************************
+ * FileClose: reset the offset to 0
+ *****************************************************************************/
+void FileClose (vlc_object_t * p_this)
+{
+    stream_t     *p_access = reinterpret_cast<stream_t *>(p_this);
+
+    access_sys_t *sys = reinterpret_cast<access_sys_t *>(p_access->p_sys);
+    sys->offset = 0;
+}
+
+static ssize_t Read (stream_t *p_access, void *p_buffer, size_t i_len)
+{
+    access_sys_t *sys = reinterpret_cast<access_sys_t *>(p_access->p_sys);
+
+    EM_ASM ({
+            let p_buffer = $0;
+            let start = $1;
+            let end = $2;
+
+            let reader = new FileReaderSync();
+            // TODO: get MimeType from the file handler
+            let data = reader.readAsArrayBuffer( new Blob([Module.fileHandle.slice(start, start+end)], {type: 'video/mp4'}) );
+            let dataView = new Uint8Array( data );
+            let wasmMemoryView = new Uint8Array( Module.wasmMemory.buffer, p_buffer, end); // ajouter + i_len
+            let wasmMemoryItems = wasmMemoryView.entries();
+            
+            for ( let item of dataView.entries() ) {
+                let index = wasmMemoryItems.next().value[0];
+                wasmMemoryView[index] = item[1];// an item is: [index, value]
+            }
+        }, p_buffer, sys->offset, i_len );
+    sys->offset += i_len;
+    return i_len;
+}
+
+/*****************************************************************************
+ * Seek: seek to a specific location in a file
+ *****************************************************************************/
+static int FileSeek (stream_t *p_access, uint64_t i_pos)
+{
+    access_sys_t *sys = reinterpret_cast<access_sys_t *>(p_access->p_sys);
+
+    // SEEK_SET: i_pos is an absolute position
+    sys->offset = i_pos;
+
+    return VLC_SUCCESS;
+}
+
+/*****************************************************************************
+ * Control:
+ *****************************************************************************/
+static int FileControl( stream_t *p_access, int i_query, va_list args )
+{
+    access_sys_t *sys = reinterpret_cast<access_sys_t *>(p_access->p_sys);
+    bool    *pb_bool;
+    vlc_tick_t *pi_64;
+    
+    switch( i_query )
+    {
+        case STREAM_CAN_SEEK:
+        case STREAM_CAN_FASTSEEK:
+            pb_bool = va_arg( args, bool * );
+            *pb_bool = false;
+            break;
+        case STREAM_CAN_PAUSE:
+        case STREAM_CAN_CONTROL_PACE:
+            pb_bool = va_arg( args, bool * );
+            *pb_bool = sys->b_pace_control;
+            break;
+        case STREAM_GET_SIZE:
+        {
+            size_t size = EM_ASM_INT({ return Module.fileHandle.size});
+            //printf("taille: %zu\n", size);
+            // abort();
+            *va_arg( args, uint64_t * ) = size;
+            break;
+        }
+        case STREAM_GET_PTS_DELAY:
+            pi_64 = va_arg( args, vlc_tick_t * );
+            // network caching for later
+            *pi_64 = VLC_TICK_FROM_MS(
+                var_InheritInteger (p_access, "file-caching") );
+            break;
+        default:
+            return VLC_EGENERIC;
+
+    }
+    return VLC_SUCCESS;
+}
+
+vlc_module_begin ()
+    set_description( N_("File input") )
+    set_shortname( N_("emscriptenfs") )
+    set_category( CAT_INPUT )
+    set_subcategory( SUBCAT_INPUT_ACCESS )
+    set_capability( "access", 50 )
+    add_shortcut( "emscriptenfs" )
+    set_callbacks( FileOpen, FileClose )
+vlc_module_end ()
-- 
2.32.0

